@if (server != null)
{
    <EditForm Enhance="true" Model="server" FormName="serverComponentForm" OnSubmit="ChangeServerStatus">
    <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>
    <InputText @bind-Value="server.Name" hidden></InputText>
    <InputText @bind-Value="server.City" hidden></InputText>
    <InputCheckbox @bind-Value="server.IsOnline" hidden></InputCheckbox>
    <div data-name="@server.Name" data-status="@(server.IsOnline ? "online" : "offline")"
        style="@($"color:{(server.IsOnline?"green":"red")}")">
        @server.Name is in @server.City and it is:
        @(server.IsOnline ? "online" : "offline")
        &nbsp;
        <button type="submit" class="btn btn-primary">Turn On/Off</button>
    </div>
</EditForm>
}


@code {
    // private Server server = new Server { Name = "Server 1", City = "Toronto" };

    // Goal - have a button to flip server on/off
    // This is a convoluted way to initialize a server
    // then able to update the information from the form submit
    // we hide the server infomation in hidden fields, so that form submits the value back to the server object
    // which is bound via [SupplyParameterFromForm]
    // Then ChangeServerStatus() on submit toggles the server status

    // For enhanced form interactivity in SSR
    // just need to add the Enhance="true" attribute in EditForm
    [SupplyParameterFromForm]
    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        server ??= new Server { Name = "Server 1", City = "Toronto" };
    }

    private void ChangeServerStatus()
    {
        if (server != null)
        {
            server.IsOnline = !server.IsOnline;
        }
    }
}