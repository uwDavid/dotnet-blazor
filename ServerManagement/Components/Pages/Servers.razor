@page "/servers"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<h3>Servers</h3>
<br />
<br />
<h3>Server Component:</h3>
<ServerComponent @rendermode="InteractiveServer"></ServerComponent>
<br />
<br />
<h3>List of Cities:</h3>
<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)?"border-primary":"")">
                    <img src="@($"/images/{city}.jpeg")" class="card-img-top" alt="...">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick="@(()=>{ SelectCity(city); })">
                            @city
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
Selected city is: @selectedCity
<br />
<h3>Search Bar</h3>
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Servers" @onchange="HandleServerFilterChange" />
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>
<br />
<h3>Data Binding Example for Search Bar</h3>
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Servers" @bind-value="serverFilter" />
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>
<br />
<h4>Server Filter: @serverFilter</h4>
<br />
<h3>List of Servers in City:</h3>
<ul>
    @foreach (var server in servers)
    {
        <li>
            @server.Name in @server.City is
            <span style="color:@((server.IsOnline?"green":"red"))">
                @(server.IsOnline ? "online" : "offline")
            </span>
            &nbsp;
            <a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
            &nbsp;
            <EditForm Model="server" FormName="@($"form-server-{server.ServerId}")"
                OnValidSubmit="@(() => {DeleteServer(server.ServerId);})">
                <button class="btn btn-primary" type="submit">Delete</button>
            </EditForm>
        </li>
    }
</ul>
<p>
    <a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>
@code {
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");
    private List<string> cities = CitiesRepository.GetCities();

    // in Blazor SSR, there's no javascript
    // thus to delete an item, we have to post the request in a form submission
    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            // NavigationManager.Refresh();
            // Refresh() isn't working at this time
            NavigationManager.NavigateTo("/servers");
        }
    }

    // select city
    private string selectedCity = "Toronto";

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;
        this.servers = ServersRepository.GetServersByCity(this.selectedCity);

    }

    // search bar - to demo onchange event
    private string serverFilter { get; set; } = "";
    private void HandleServerFilterChange(ChangeEventArgs args)
    {
        // args contain the value that changed
        // serverFilter = args.Value?.ToString() ?? string.Empty;

        Console.WriteLine("onChange event implementation of search bar");
    }

    private void HandleSearch()
    {
        this.servers = ServersRepository.SearchServers(serverFilter);
        this.selectedCity = string.Empty;
        // doesn't make sense to keep the card highlighted

    }
}