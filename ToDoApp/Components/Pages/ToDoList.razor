@page "/todolist"

@rendermode InteractiveServer // add page interactive render

<h3>To Do</h3>
<br />

<button type="button" class="btn btn-primary" @onclick="AddTask">
    Add Task
</button>
<br />
<br />

@if (items != null && items.Count > 0)
{
    <ul class="list-unstyled">
    @foreach (var item in items)
        {
            <li @key="item.Id">
                <div class="row mb-2">
                    <div class="col-1" style="width: 30px">
                        <input type="checkbox" style="vertical-align:middle" class="form-check-input"
                            @bind-value="item.IsCompleted" checked="@item.IsCompleted" />
                    </div>
                    <div class="col">
                        @if (item.IsCompleted)
                        {
                            <input type="text" style="vertical-align: middle;"
                                class="form-control border-0 text-decoration-line-through" @bind-value="item.Name" disabled />
                        }
                        else
                        {
                            <input type="text" style="vertical-align: middle;" class="form-control border-0"
                                @bind-value="item.Name" />
                        }
                    </div>
                    <div class="col">
                        @if (item.IsCompleted)
                        {
                            <text>Completed at: @item.DateCompleted.ToLongDateString()</text>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
}

@code {
    // State var to display list of to do items
    private List<ToDoItem> items = ToDoItemsRepository.GetItems();

    // Add task feature
    // 1- we have to add interactivity to page
    // 2- make the items var reload on adding item
    private void AddTask()
    {
        ToDoItemsRepository.AddItem(new ToDoItem { Name = "New Task" });
        items = ToDoItemsRepository.GetItems(); // reload items list
    }

    // Edit task name feature
    // 1 - change the li item from @item.Name to input box
    // 2 - use 2-way data binding via @bind-value

    // Mark task as completed feature
    // 1 - add a checkbox
    // 2 - display IsCompleted and DateCompleted properties
    // we use the "row" class from bootstrap, and have 3 columns in our div
    // checkbox, task name input box, and date completed
    // for date completed, inside the if() statement, to enter text we used <text> tag

    // css tricks
    // to remove bullet points, ul class = list-unstyled
    // to specify width of columns: use style="width:30px"

    // with 2-way data binding @bind-value => we cannot add @onchange
    // to use this, we need to:
    // 1 - declare a private field
    // 2 - define custom getter/setters for public property
}
